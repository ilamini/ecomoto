/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCarImageArgs } from "./CreateCarImageArgs";
import { UpdateCarImageArgs } from "./UpdateCarImageArgs";
import { DeleteCarImageArgs } from "./DeleteCarImageArgs";
import { CarImageCountArgs } from "./CarImageCountArgs";
import { CarImageFindManyArgs } from "./CarImageFindManyArgs";
import { CarImageFindUniqueArgs } from "./CarImageFindUniqueArgs";
import { CarImage } from "./CarImage";
import { Car } from "../../car/base/Car";
import { CarImageService } from "../carImage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CarImage)
export class CarImageResolverBase {
  constructor(
    protected readonly service: CarImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "read",
    possession: "any",
  })
  async _carImagesMeta(
    @graphql.Args() args: CarImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CarImage])
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "read",
    possession: "any",
  })
  async carImages(
    @graphql.Args() args: CarImageFindManyArgs
  ): Promise<CarImage[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CarImage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "read",
    possession: "own",
  })
  async carImage(
    @graphql.Args() args: CarImageFindUniqueArgs
  ): Promise<CarImage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarImage)
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "create",
    possession: "any",
  })
  async createCarImage(
    @graphql.Args() args: CreateCarImageArgs
  ): Promise<CarImage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        carId: {
          connect: args.data.carId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarImage)
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "update",
    possession: "any",
  })
  async updateCarImage(
    @graphql.Args() args: UpdateCarImageArgs
  ): Promise<CarImage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          carId: {
            connect: args.data.carId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarImage)
  @nestAccessControl.UseRoles({
    resource: "CarImage",
    action: "delete",
    possession: "any",
  })
  async deleteCarImage(
    @graphql.Args() args: DeleteCarImageArgs
  ): Promise<CarImage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Car, {
    nullable: true,
    name: "carId",
  })
  @nestAccessControl.UseRoles({
    resource: "Car",
    action: "read",
    possession: "any",
  })
  async resolveFieldCarId(
    @graphql.Parent() parent: CarImage
  ): Promise<Car | null> {
    const result = await this.service.getCarId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
