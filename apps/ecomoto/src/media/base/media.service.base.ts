/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Media, // @ts-ignore
  UserFeed,
} from "@prisma/client";

export class MediaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MediaCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaCountArgs>
  ): Promise<number> {
    return this.prisma.media.count(args);
  }

  async mediaItems<T extends Prisma.MediaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaFindManyArgs>
  ): Promise<Media[]> {
    return this.prisma.media.findMany(args);
  }
  async media<T extends Prisma.MediaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaFindUniqueArgs>
  ): Promise<Media | null> {
    return this.prisma.media.findUnique(args);
  }
  async createMedia<T extends Prisma.MediaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaCreateArgs>
  ): Promise<Media> {
    return this.prisma.media.create<T>(args);
  }
  async updateMedia<T extends Prisma.MediaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaUpdateArgs>
  ): Promise<Media> {
    return this.prisma.media.update<T>(args);
  }
  async deleteMedia<T extends Prisma.MediaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaDeleteArgs>
  ): Promise<Media> {
    return this.prisma.media.delete(args);
  }

  async getUserFeed(parentId: string): Promise<UserFeed | null> {
    return this.prisma.media
      .findUnique({
        where: { id: parentId },
      })
      .userFeed();
  }
}
