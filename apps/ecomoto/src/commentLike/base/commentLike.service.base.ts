/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CommentLike, // @ts-ignore
  Comment, // @ts-ignore
  User,
} from "@prisma/client";

export class CommentLikeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CommentLikeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeCountArgs>
  ): Promise<number> {
    return this.prisma.commentLike.count(args);
  }

  async commentLikes<T extends Prisma.CommentLikeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeFindManyArgs>
  ): Promise<CommentLike[]> {
    return this.prisma.commentLike.findMany(args);
  }
  async commentLike<T extends Prisma.CommentLikeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeFindUniqueArgs>
  ): Promise<CommentLike | null> {
    return this.prisma.commentLike.findUnique(args);
  }
  async createCommentLike<T extends Prisma.CommentLikeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeCreateArgs>
  ): Promise<CommentLike> {
    return this.prisma.commentLike.create<T>(args);
  }
  async updateCommentLike<T extends Prisma.CommentLikeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeUpdateArgs>
  ): Promise<CommentLike> {
    return this.prisma.commentLike.update<T>(args);
  }
  async deleteCommentLike<T extends Prisma.CommentLikeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentLikeDeleteArgs>
  ): Promise<CommentLike> {
    return this.prisma.commentLike.delete(args);
  }

  async getComment(parentId: string): Promise<Comment | null> {
    return this.prisma.commentLike
      .findUnique({
        where: { id: parentId },
      })
      .comment();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.commentLike
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
