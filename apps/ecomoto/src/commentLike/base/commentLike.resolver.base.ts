/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCommentLikeArgs } from "./CreateCommentLikeArgs";
import { UpdateCommentLikeArgs } from "./UpdateCommentLikeArgs";
import { DeleteCommentLikeArgs } from "./DeleteCommentLikeArgs";
import { CommentLikeCountArgs } from "./CommentLikeCountArgs";
import { CommentLikeFindManyArgs } from "./CommentLikeFindManyArgs";
import { CommentLikeFindUniqueArgs } from "./CommentLikeFindUniqueArgs";
import { CommentLike } from "./CommentLike";
import { Comment } from "../../comment/base/Comment";
import { User } from "../../user/base/User";
import { CommentLikeService } from "../commentLike.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CommentLike)
export class CommentLikeResolverBase {
  constructor(
    protected readonly service: CommentLikeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "read",
    possession: "any",
  })
  async _commentLikesMeta(
    @graphql.Args() args: CommentLikeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CommentLike])
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "read",
    possession: "any",
  })
  async commentLikes(
    @graphql.Args() args: CommentLikeFindManyArgs
  ): Promise<CommentLike[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CommentLike, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "read",
    possession: "own",
  })
  async commentLike(
    @graphql.Args() args: CommentLikeFindUniqueArgs
  ): Promise<CommentLike | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CommentLike)
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "create",
    possession: "any",
  })
  async createCommentLike(
    @graphql.Args() args: CreateCommentLikeArgs
  ): Promise<CommentLike> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        comment: args.data.comment
          ? {
              connect: args.data.comment,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CommentLike)
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "update",
    possession: "any",
  })
  async updateCommentLike(
    @graphql.Args() args: UpdateCommentLikeArgs
  ): Promise<CommentLike | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          comment: args.data.comment
            ? {
                connect: args.data.comment,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommentLike)
  @nestAccessControl.UseRoles({
    resource: "CommentLike",
    action: "delete",
    possession: "any",
  })
  async deleteCommentLike(
    @graphql.Args() args: DeleteCommentLikeArgs
  ): Promise<CommentLike | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Comment, {
    nullable: true,
    name: "comment",
  })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async resolveFieldComment(
    @graphql.Parent() parent: CommentLike
  ): Promise<Comment | null> {
    const result = await this.service.getComment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: CommentLike
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
