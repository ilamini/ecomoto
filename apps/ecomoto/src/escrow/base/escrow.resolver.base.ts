/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEscrowArgs } from "./CreateEscrowArgs";
import { UpdateEscrowArgs } from "./UpdateEscrowArgs";
import { DeleteEscrowArgs } from "./DeleteEscrowArgs";
import { EscrowCountArgs } from "./EscrowCountArgs";
import { EscrowFindManyArgs } from "./EscrowFindManyArgs";
import { EscrowFindUniqueArgs } from "./EscrowFindUniqueArgs";
import { Escrow } from "./Escrow";
import { Rental } from "../../rental/base/Rental";
import { EscrowService } from "../escrow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Escrow)
export class EscrowResolverBase {
  constructor(
    protected readonly service: EscrowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "read",
    possession: "any",
  })
  async _escrowsMeta(
    @graphql.Args() args: EscrowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Escrow])
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "read",
    possession: "any",
  })
  async escrows(@graphql.Args() args: EscrowFindManyArgs): Promise<Escrow[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Escrow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "read",
    possession: "own",
  })
  async escrow(
    @graphql.Args() args: EscrowFindUniqueArgs
  ): Promise<Escrow | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Escrow)
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "create",
    possession: "any",
  })
  async createEscrow(@graphql.Args() args: CreateEscrowArgs): Promise<Escrow> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        rentalId: {
          connect: args.data.rentalId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Escrow)
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "update",
    possession: "any",
  })
  async updateEscrow(
    @graphql.Args() args: UpdateEscrowArgs
  ): Promise<Escrow | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          rentalId: {
            connect: args.data.rentalId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Escrow)
  @nestAccessControl.UseRoles({
    resource: "Escrow",
    action: "delete",
    possession: "any",
  })
  async deleteEscrow(
    @graphql.Args() args: DeleteEscrowArgs
  ): Promise<Escrow | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Rental, {
    nullable: true,
    name: "rentalId",
  })
  @nestAccessControl.UseRoles({
    resource: "Rental",
    action: "read",
    possession: "any",
  })
  async resolveFieldRentalId(
    @graphql.Parent() parent: Escrow
  ): Promise<Rental | null> {
    const result = await this.service.getRentalId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
