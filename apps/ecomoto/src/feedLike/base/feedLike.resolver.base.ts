/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFeedLikeArgs } from "./CreateFeedLikeArgs";
import { UpdateFeedLikeArgs } from "./UpdateFeedLikeArgs";
import { DeleteFeedLikeArgs } from "./DeleteFeedLikeArgs";
import { FeedLikeCountArgs } from "./FeedLikeCountArgs";
import { FeedLikeFindManyArgs } from "./FeedLikeFindManyArgs";
import { FeedLikeFindUniqueArgs } from "./FeedLikeFindUniqueArgs";
import { FeedLike } from "./FeedLike";
import { CommunityFeed } from "../../communityFeed/base/CommunityFeed";
import { User } from "../../user/base/User";
import { FeedLikeService } from "../feedLike.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FeedLike)
export class FeedLikeResolverBase {
  constructor(
    protected readonly service: FeedLikeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "read",
    possession: "any",
  })
  async _feedLikesMeta(
    @graphql.Args() args: FeedLikeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FeedLike])
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "read",
    possession: "any",
  })
  async feedLikes(
    @graphql.Args() args: FeedLikeFindManyArgs
  ): Promise<FeedLike[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FeedLike, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "read",
    possession: "own",
  })
  async feedLike(
    @graphql.Args() args: FeedLikeFindUniqueArgs
  ): Promise<FeedLike | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedLike)
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "create",
    possession: "any",
  })
  async createFeedLike(
    @graphql.Args() args: CreateFeedLikeArgs
  ): Promise<FeedLike> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        communityFeed: args.data.communityFeed
          ? {
              connect: args.data.communityFeed,
            }
          : undefined,

        likedBy: {
          connect: args.data.likedBy,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedLike)
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "update",
    possession: "any",
  })
  async updateFeedLike(
    @graphql.Args() args: UpdateFeedLikeArgs
  ): Promise<FeedLike | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          communityFeed: args.data.communityFeed
            ? {
                connect: args.data.communityFeed,
              }
            : undefined,

          likedBy: {
            connect: args.data.likedBy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeedLike)
  @nestAccessControl.UseRoles({
    resource: "FeedLike",
    action: "delete",
    possession: "any",
  })
  async deleteFeedLike(
    @graphql.Args() args: DeleteFeedLikeArgs
  ): Promise<FeedLike | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CommunityFeed, {
    nullable: true,
    name: "communityFeed",
  })
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "read",
    possession: "any",
  })
  async resolveFieldCommunityFeed(
    @graphql.Parent() parent: FeedLike
  ): Promise<CommunityFeed | null> {
    const result = await this.service.getCommunityFeed(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "likedBy",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldLikedBy(
    @graphql.Parent() parent: FeedLike
  ): Promise<User | null> {
    const result = await this.service.getLikedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
