/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCommunityArgs } from "./CreateCommunityArgs";
import { UpdateCommunityArgs } from "./UpdateCommunityArgs";
import { DeleteCommunityArgs } from "./DeleteCommunityArgs";
import { CommunityCountArgs } from "./CommunityCountArgs";
import { CommunityFindManyArgs } from "./CommunityFindManyArgs";
import { CommunityFindUniqueArgs } from "./CommunityFindUniqueArgs";
import { Community } from "./Community";
import { CommunityFeedFindManyArgs } from "../../communityFeed/base/CommunityFeedFindManyArgs";
import { CommunityFeed } from "../../communityFeed/base/CommunityFeed";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { CommunityService } from "../community.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Community)
export class CommunityResolverBase {
  constructor(
    protected readonly service: CommunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async _communitiesMeta(
    @graphql.Args() args: CommunityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Community])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async communities(
    @graphql.Args() args: CommunityFindManyArgs
  ): Promise<Community[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Community, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "own",
  })
  async community(
    @graphql.Args() args: CommunityFindUniqueArgs
  ): Promise<Community | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "create",
    possession: "any",
  })
  async createCommunity(
    @graphql.Args() args: CreateCommunityArgs
  ): Promise<Community> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "update",
    possession: "any",
  })
  async updateCommunity(
    @graphql.Args() args: UpdateCommunityArgs
  ): Promise<Community | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "delete",
    possession: "any",
  })
  async deleteCommunity(
    @graphql.Args() args: DeleteCommunityArgs
  ): Promise<Community | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CommunityFeed], { name: "communityFeeds" })
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "read",
    possession: "any",
  })
  async resolveFieldCommunityFeeds(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: CommunityFeedFindManyArgs
  ): Promise<CommunityFeed[]> {
    const results = await this.service.findCommunityFeeds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "members" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldMembers(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
