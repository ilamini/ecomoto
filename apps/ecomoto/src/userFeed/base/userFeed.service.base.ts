/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserFeed, // @ts-ignore
  Comment, // @ts-ignore
  Media, // @ts-ignore
  User,
} from "@prisma/client";

export class UserFeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserFeedCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedCountArgs>
  ): Promise<number> {
    return this.prisma.userFeed.count(args);
  }

  async userFeeds<T extends Prisma.UserFeedFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedFindManyArgs>
  ): Promise<UserFeed[]> {
    return this.prisma.userFeed.findMany(args);
  }
  async userFeed<T extends Prisma.UserFeedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedFindUniqueArgs>
  ): Promise<UserFeed | null> {
    return this.prisma.userFeed.findUnique(args);
  }
  async createUserFeed<T extends Prisma.UserFeedCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedCreateArgs>
  ): Promise<UserFeed> {
    return this.prisma.userFeed.create<T>(args);
  }
  async updateUserFeed<T extends Prisma.UserFeedUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedUpdateArgs>
  ): Promise<UserFeed> {
    return this.prisma.userFeed.update<T>(args);
  }
  async deleteUserFeed<T extends Prisma.UserFeedDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFeedDeleteArgs>
  ): Promise<UserFeed> {
    return this.prisma.userFeed.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<Comment[]> {
    return this.prisma.userFeed
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findMedia(
    parentId: string,
    args: Prisma.MediaFindManyArgs
  ): Promise<Media[]> {
    return this.prisma.userFeed
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .media(args);
  }

  async getCreator(parentId: string): Promise<User | null> {
    return this.prisma.userFeed
      .findUnique({
        where: { id: parentId },
      })
      .creator();
  }
}
