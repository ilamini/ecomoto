/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserFeed } from "./UserFeed";
import { UserFeedCountArgs } from "./UserFeedCountArgs";
import { UserFeedFindManyArgs } from "./UserFeedFindManyArgs";
import { UserFeedFindUniqueArgs } from "./UserFeedFindUniqueArgs";
import { CreateUserFeedArgs } from "./CreateUserFeedArgs";
import { UpdateUserFeedArgs } from "./UpdateUserFeedArgs";
import { DeleteUserFeedArgs } from "./DeleteUserFeedArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { User } from "../../user/base/User";
import { UserFeedService } from "../userFeed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserFeed)
export class UserFeedResolverBase {
  constructor(
    protected readonly service: UserFeedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "read",
    possession: "any",
  })
  async _userFeedsMeta(
    @graphql.Args() args: UserFeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserFeed])
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "read",
    possession: "any",
  })
  async userFeeds(
    @graphql.Args() args: UserFeedFindManyArgs
  ): Promise<UserFeed[]> {
    return this.service.userFeeds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserFeed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "read",
    possession: "own",
  })
  async userFeed(
    @graphql.Args() args: UserFeedFindUniqueArgs
  ): Promise<UserFeed | null> {
    const result = await this.service.userFeed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFeed)
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "create",
    possession: "any",
  })
  async createUserFeed(
    @graphql.Args() args: CreateUserFeedArgs
  ): Promise<UserFeed> {
    return await this.service.createUserFeed({
      ...args,
      data: {
        ...args.data,

        creator: args.data.creator
          ? {
              connect: args.data.creator,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFeed)
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "update",
    possession: "any",
  })
  async updateUserFeed(
    @graphql.Args() args: UpdateUserFeedArgs
  ): Promise<UserFeed | null> {
    try {
      return await this.service.updateUserFeed({
        ...args,
        data: {
          ...args.data,

          creator: args.data.creator
            ? {
                connect: args.data.creator,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFeed)
  @nestAccessControl.UseRoles({
    resource: "UserFeed",
    action: "delete",
    possession: "any",
  })
  async deleteUserFeed(
    @graphql.Args() args: DeleteUserFeedArgs
  ): Promise<UserFeed | null> {
    try {
      return await this.service.deleteUserFeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comment], { name: "comments" })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async findComments(
    @graphql.Parent() parent: UserFeed,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Media], { name: "media" })
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMedia(
    @graphql.Parent() parent: UserFeed,
    @graphql.Args() args: MediaFindManyArgs
  ): Promise<Media[]> {
    const results = await this.service.findMedia(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getCreator(@graphql.Parent() parent: UserFeed): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
