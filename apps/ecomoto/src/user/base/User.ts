/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CommentLike } from "../../commentLike/base/CommentLike";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Comment } from "../../comment/base/Comment";
import { Community } from "../../community/base/Community";
import { CommunityFeed } from "../../communityFeed/base/CommunityFeed";
import { FeedLike } from "../../feedLike/base/FeedLike";
import { IsJSONValue } from "@app/custom-validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumUserUserType } from "./EnumUserUserType";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => [CommentLike],
  })
  @ValidateNested()
  @Type(() => CommentLike)
  @IsOptional()
  commentLikes?: Array<CommentLike>;

  @ApiProperty({
    required: false,
    type: () => [Comment],
  })
  @ValidateNested()
  @Type(() => Comment)
  @IsOptional()
  comments?: Array<Comment>;

  @ApiProperty({
    required: false,
    type: () => [Community],
  })
  @ValidateNested()
  @Type(() => Community)
  @IsOptional()
  communities?: Array<Community>;

  @ApiProperty({
    required: false,
    type: () => [CommunityFeed],
  })
  @ValidateNested()
  @Type(() => CommunityFeed)
  @IsOptional()
  communityFeeds?: Array<CommunityFeed>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: () => [FeedLike],
  })
  @ValidateNested()
  @Type(() => FeedLike)
  @IsOptional()
  feedLikes?: Array<FeedLike>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: JsonValue;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: true,
    enum: EnumUserUserType,
  })
  @IsEnum(EnumUserUserType)
  @Field(() => EnumUserUserType, {
    nullable: true,
  })
  userType?: "Lessee" | "Lessor";
}

export { User as User };
