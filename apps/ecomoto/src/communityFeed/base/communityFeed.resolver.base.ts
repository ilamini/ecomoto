/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCommunityFeedArgs } from "./CreateCommunityFeedArgs";
import { UpdateCommunityFeedArgs } from "./UpdateCommunityFeedArgs";
import { DeleteCommunityFeedArgs } from "./DeleteCommunityFeedArgs";
import { CommunityFeedCountArgs } from "./CommunityFeedCountArgs";
import { CommunityFeedFindManyArgs } from "./CommunityFeedFindManyArgs";
import { CommunityFeedFindUniqueArgs } from "./CommunityFeedFindUniqueArgs";
import { CommunityFeed } from "./CommunityFeed";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { Community } from "../../community/base/Community";
import { User } from "../../user/base/User";
import { CommunityFeedService } from "../communityFeed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CommunityFeed)
export class CommunityFeedResolverBase {
  constructor(
    protected readonly service: CommunityFeedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "read",
    possession: "any",
  })
  async _communityFeedsMeta(
    @graphql.Args() args: CommunityFeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CommunityFeed])
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "read",
    possession: "any",
  })
  async communityFeeds(
    @graphql.Args() args: CommunityFeedFindManyArgs
  ): Promise<CommunityFeed[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CommunityFeed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "read",
    possession: "own",
  })
  async communityFeed(
    @graphql.Args() args: CommunityFeedFindUniqueArgs
  ): Promise<CommunityFeed | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CommunityFeed)
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "create",
    possession: "any",
  })
  async createCommunityFeed(
    @graphql.Args() args: CreateCommunityFeedArgs
  ): Promise<CommunityFeed> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        community: args.data.community
          ? {
              connect: args.data.community,
            }
          : undefined,

        creator: args.data.creator
          ? {
              connect: args.data.creator,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CommunityFeed)
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "update",
    possession: "any",
  })
  async updateCommunityFeed(
    @graphql.Args() args: UpdateCommunityFeedArgs
  ): Promise<CommunityFeed | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          community: args.data.community
            ? {
                connect: args.data.community,
              }
            : undefined,

          creator: args.data.creator
            ? {
                connect: args.data.creator,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommunityFeed)
  @nestAccessControl.UseRoles({
    resource: "CommunityFeed",
    action: "delete",
    possession: "any",
  })
  async deleteCommunityFeed(
    @graphql.Args() args: DeleteCommunityFeedArgs
  ): Promise<CommunityFeed | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comment], { name: "comments" })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async resolveFieldComments(
    @graphql.Parent() parent: CommunityFeed,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Community, {
    nullable: true,
    name: "community",
  })
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async resolveFieldCommunity(
    @graphql.Parent() parent: CommunityFeed
  ): Promise<Community | null> {
    const result = await this.service.getCommunity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldCreator(
    @graphql.Parent() parent: CommunityFeed
  ): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
