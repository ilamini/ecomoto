/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Car } from "../../car/base/Car";
import {
  ValidateNested,
  IsDate,
  IsString,
  IsOptional,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Escrow } from "../../escrow/base/Escrow";
import { User } from "../../user/base/User";
import { Plan } from "../../plan/base/Plan";
import { EnumRentalRentalStatus } from "./EnumRentalRentalStatus";

@ObjectType()
class Rental {
  @ApiProperty({
    required: true,
    type: () => Car,
  })
  @ValidateNested()
  @Type(() => Car)
  carId?: Car;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currentLocation!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  destination!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  destinationGeoLoc!: string;

  @ApiProperty({
    required: false,
    type: () => Escrow,
  })
  @ValidateNested()
  @Type(() => Escrow)
  @IsOptional()
  escrows?: Escrow | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  lesseeId?: User;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  pickupAddress!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  pickupGeoLoc!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  pickupTime!: Date | null;

  @ApiProperty({
    required: true,
    type: () => Plan,
  })
  @ValidateNested()
  @Type(() => Plan)
  planId?: Plan;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  rentalEndDatetime!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  rentalRequestTime!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  rentalStartDatetime!: Date;

  @ApiProperty({
    required: false,
    enum: EnumRentalRentalStatus,
  })
  @IsEnum(EnumRentalRentalStatus)
  @IsOptional()
  @Field(() => EnumRentalRentalStatus, {
    nullable: true,
  })
  rentalStatus?:
    | "Requesting"
    | "Accepted"
    | "Rejected"
    | "Active"
    | "Completed"
    | "Extended"
    | "Settled"
    | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Rental as Rental };
