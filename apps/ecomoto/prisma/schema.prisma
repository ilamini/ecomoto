datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  cars           Car[]
  comments       Comment[]
  communities    Community[]     @relation(fields: [communitiesIds], references: [id])
  communitiesIds String[]        @mongo.ObjectId
  communityFeeds CommunityFeed[]
  createdAt      DateTime        @default(now())
  deletedAt      DateTime?
  email          String          @unique
  firstName      String?
  id             String          @id @default(auto()) @map("_id") @mongo.ObjectId
  lastName       String?
  password       String
  rentals        Rental[]
  roles          Json
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  userType EnumUserUserType @default('Lessee')
}

model Car {
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  id               String    @id @default(auto()) @map("_id") @mongo.ObjectId
  lessorId         User      @relation(fields: [lessorIdId], references: [id])
  lessorIdId       String
  make             String
  model            String
  parkedLocation   Json?
  registrationInfo String
  rentals          Rental[]
  updatedAt        DateTime  @updatedAt
}

model Rental {
  carId               Car                     @relation(fields: [carIdId], references: [id])
  carIdId             String
  createdAt           DateTime                @default(now())
  currentLocation     String?
  deletedAt           DateTime?
  destination         String
  destinationGeoLoc   String
  id                  String                  @id @default(auto()) @map("_id") @mongo.ObjectId
  lesseeId            User                    @relation(fields: [lesseeIdId], references: [id])
  lesseeIdId          String
  pickupAddress       String
  pickupGeoLoc        String
  pickupTime          DateTime?
  planId              Plan                    @relation(fields: [sa], references: [id])
  sa                  String
  rentalEndDatetime   DateTime
  rentalRequestTime   DateTime
  rentalStartDatetime DateTime
  rentalStatus        EnumRentalRentalStatus?
  updatedAt           DateTime                @updatedAt
}

model Plan {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  name      String
  rentals   Rental[]
  updatedAt DateTime @updatedAt
}

model Community {
  communityFeeds       CommunityFeed[]
  communityHeadeImgUrl String
  createdAt            DateTime        @default(now())
  description          String
  id                   String          @id @default(auto()) @map("_id") @mongo.ObjectId
  members              User[]          @relation(fields: [membersIds], references: [id])
  membersIds           String[]        @mongo.ObjectId
  name                 String
  updatedAt            DateTime        @updatedAt
}

model CommunityFeed {
  comments    Comment[]
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  content     String
  createdAt   DateTime   @default(now())
  creator     User?      @relation(fields: [ds], references: [id])
  ds          String?
  id          String     @id @default(auto()) @map("_id") @mongo.ObjectId
  updatedAt   DateTime   @updatedAt
}

model Comment {
  comments        String?
  communityFeed   CommunityFeed? @relation(fields: [communityFeedId], references: [id])
  communityFeedId String?
  createdAt       DateTime       @default(now())
  creator         User?          @relation(fields: [user_id], references: [id])
  user_id         String?
  id              String         @id @default(auto()) @map("_id") @mongo.ObjectId
  updatedAt       DateTime       @updatedAt
}

enum EnumUserUserType {
  Lessee
  Lessor
}

enum EnumRentalRentalStatus {
  Requesting
  Accepted
  Rejected
  Active
  Completed
  Extended
  Settled
}
