datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  commentLikes   CommentLike[]
  comments       Comment[]
  communities    Community[]   @relation(fields: [communitiesIds], references: [id])
  communitiesIds String[]      @db.ObjectId
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?
  email          String        @unique
  firstName      String?
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  lastName       String?
  password       String
  roles          Json
  updatedAt      DateTime      @updatedAt
  userFeeds      UserFeed[]
  username       String        @unique
  userType EnumUserUserType @default('Lessee')
}

model Community {
  communityHeadeImgUrl String
  createdAt            DateTime @default(now())
  description          String
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  members              User[]   @relation(fields: [membersIds], references: [id])
  membersIds           String[] @db.ObjectId
  name                 String
  updatedAt            DateTime @updatedAt
}

model Comment {
  commentLikes CommentLike[]
  comments     String?
  createdAt    DateTime      @default(now())
  creator      User?         @relation(fields: [user_id], references: [id])
  user_id      String?       @db.ObjectId
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt    DateTime      @updatedAt
  userFeed     UserFeed?     @relation(fields: [userFeedId], references: [id])
  userFeedId   String?       @db.ObjectId
}

model Media {
  createdAt  DateTime  @default(now())
  createdBy  String?
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl   String?
  updatedAt  DateTime  @updatedAt
  userFeed   UserFeed? @relation(fields: [userFeedId], references: [id])
  userFeedId String?   @db.ObjectId
  videoUrl   String?
}

model CommentLike {
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model UserFeed {
  comments  Comment[]
  content   String
  createdAt DateTime  @default(now())
  creator   User?     @relation(fields: [user_id], references: [id])
  user_id   String?   @db.ObjectId
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  media     Media[]
  updatedAt DateTime  @updatedAt
}

enum EnumUserUserType {
  Lessee
  Lessor
}
