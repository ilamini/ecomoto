datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  cars          Car[]
  createdAt     DateTime       @default(now())
  deletedAt     DateTime?
  email         String         @unique
  firstName     String?
  id            String         @id @default(auto()) @map("_id") @mongo.ObjectId
  lastName      String?
  notifications Notification[]
  password      String
  rentals       Rental[]
  roles         Json
  updatedAt     DateTime       @updatedAt
  username      String         @unique
  userType EnumUserUserType @default('Lessee')
}

model Car {
  carImages        CarImage[]
  createdAt        DateTime   @default(now())
  deletedAt        DateTime?
  id               String     @id @default(auto()) @map("_id") @mongo.ObjectId
  lessorId         User       @relation(fields: [lessorIdId], references: [id])
  lessorIdId       String
  make             String
  model            String
  parkedLocation   Json?
  registrationInfo String
  rentals          Rental[]
  updatedAt        DateTime   @updatedAt
}

model CarImage {
  carId     Car      @relation(fields: [carIdId], references: [id])
  carIdId   String
  createdAt DateTime @default(now())
  deletedAt String?
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  imageUrl  String
  updatedAt DateTime @updatedAt
}

model Rental {
  carId               Car                     @relation(fields: [carIdId], references: [id])
  carIdId             String
  createdAt           DateTime                @default(now())
  currentLocation     String?
  deletedAt           DateTime?
  destination         String
  destinationGeoLoc   String
  escrows             Escrow?
  id                  String                  @id @default(auto()) @map("_id") @mongo.ObjectId
  lesseeId            User                    @relation(fields: [lesseeIdId], references: [id])
  lesseeIdId          String
  pickupAddress       String
  pickupGeoLoc        String
  pickupTime          DateTime?
  planId              Plan                    @relation(fields: [sa], references: [id])
  sa                  String
  rentalEndDatetime   DateTime
  rentalRequestTime   DateTime
  rentalStartDatetime DateTime
  rentalStatus        EnumRentalRentalStatus?
  updatedAt           DateTime                @updatedAt
}

model Plan {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  name      String
  rentals   Rental[]
  updatedAt DateTime @updatedAt
}

model Escrow {
  blockchainHash String?                 @default(null)
  createdAt      DateTime                @default(now())
  deletedAt      String?
  depositAmount  Float?
  depositStatus  EnumEscrowDepositStatus
  id             String                  @id @default(auto()) @map("_id") @mongo.ObjectId
  rentalId       Rental                  @relation(fields: [rental_id], references: [id])
  rental_id      String                  @unique
  updatedAt      DateTime                @updatedAt
}

model Notification {
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  id        String    @id @default(auto()) @map("_id") @mongo.ObjectId
  isRead    Boolean?
  message   String
  updatedAt DateTime  @updatedAt
  userId    User      @relation(fields: [userIdId], references: [id])
  userIdId  String
}

enum EnumUserUserType {
  Lessee
  Lessor
}

enum EnumRentalRentalStatus {
  Requesting
  Accepted
  Rejected
  Active
  Completed
  Extended
  Settled
}

enum EnumEscrowDepositStatus {
  Active
  Settled
  Reversed
}
